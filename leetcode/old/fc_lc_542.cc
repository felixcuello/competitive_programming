#include <vector>
#include <iostream>

using namespace std;

void printmtx(vector<vector<int>>& mat) {
    int rows = mat.size();
    int cols = mat[0].size();
    cout << endl;
    for(int row=0; row<rows; row++) {
        for(int col=0; col<cols; col++)
            cout << mat[row][col] << " ";
        cout << endl;
    }
    cout << endl;
}


class Solution {
public:
  int dp(int row, int col, vector<vector<int>>& mat, int rows, int cols, int prev) {
    if(row < 0 || col < 0) return 0;
    if(row >= rows || col >= cols) return 0;
    if(mat[row][col] <= prev) return 0;

    prev++;

    mat[row][col] = prev;

    dp(row-1, col, mat, rows, cols, prev);
    dp(row+1, col, mat, rows, cols, prev);
    dp(row, col-1, mat, rows, cols, prev);
    dp(row, col+1, mat, rows, cols, prev);

    return mat[row][col];
  }

  vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
    int rows = mat.size();
    int cols = mat[0].size();

    for(int row=0; row<rows; row++)
      for(int col=0; col<cols; col++)
        if(mat[row][col] == 1)
          mat[row][col] = 11111; // over max

    for(int row=0; row<rows; row++)
      for(int col=0; col<cols; col++)
        if(mat[row][col] == 0) {
          dp(row-1, col, mat, rows, cols, 0);
          dp(row+1, col, mat, rows, cols, 0);
          dp(row, col-1, mat, rows, cols, 0);
          dp(row, col+1, mat, rows, cols, 0);
        }

    return mat;
  }
};

void test1(vector<vector<int>>& mat) { // broken
    mat.push_back({1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1});
    mat.push_back({1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1});
    mat.push_back({1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1});
    mat.push_back({1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,1});
    mat.push_back({0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1});
    mat.push_back({1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,0,1,0});
    mat.push_back({1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1});
    mat.push_back({1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,0,0,1,0,0,1});
    mat.push_back({0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,0,1});
    mat.push_back({1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1});
    mat.push_back({1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0});
    mat.push_back({1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1});
    mat.push_back({0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,0,0,1});
    mat.push_back({0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1});
    mat.push_back({1,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1});
    mat.push_back({1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0});
    mat.push_back({1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,1});
    mat.push_back({1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,1,1,0});
    mat.push_back({1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1});
    mat.push_back({1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0});
    mat.push_back({1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1});
    mat.push_back({0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,1});
    mat.push_back({1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1});
    mat.push_back({1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1});
    mat.push_back({0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0});
    mat.push_back({1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,1});
    mat.push_back({1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,0});
    mat.push_back({1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1});
    mat.push_back({1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1});
    mat.push_back({0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0});
}

void test2(vector<vector<int>>& mat) { // broken
    mat.push_back({1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1});
    mat.push_back({1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0});
    mat.push_back({1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0});
    mat.push_back({1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0});
    mat.push_back({0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1});
    mat.push_back({1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0});
    mat.push_back({1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,1,1});
    mat.push_back({1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,1,0});
    mat.push_back({0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0});
    mat.push_back({1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0});
    mat.push_back({1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1});
    mat.push_back({1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1});
    mat.push_back({0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0});
    mat.push_back({0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,1,1,1,1});
    mat.push_back({1,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1});
    mat.push_back({1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0});
    mat.push_back({1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,0,1,1});
    mat.push_back({1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1});
    mat.push_back({1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1});
    mat.push_back({1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1});
    mat.push_back({1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1});
    mat.push_back({0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1});
    mat.push_back({1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1});
    mat.push_back({1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1});
    mat.push_back({0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1});
    mat.push_back({1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1});
    mat.push_back({1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0});
    mat.push_back({1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0});
    mat.push_back({1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1});
    mat.push_back({0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1});
}

void test3(vector<vector<int>>& mat) { // example of TOO SLOW (2.5 sec)
    mat.push_back({1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0});
    mat.push_back({1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0});
    mat.push_back({1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0});
    mat.push_back({0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1});
    mat.push_back({1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0});
    mat.push_back({0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0});
    mat.push_back({1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0});
    mat.push_back({1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1});
    mat.push_back({1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1});
    mat.push_back({1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1});
    mat.push_back({1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1});
    mat.push_back({0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1});
    mat.push_back({1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1});
    mat.push_back({1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1});
    mat.push_back({0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1});
    mat.push_back({1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0});
    mat.push_back({1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1});
    mat.push_back({0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1});
}

int main() {
    vector<vector<int>> mat;
    test3(mat);

    Solution* s = new Solution();
    s->updateMatrix(mat);
    printmtx(mat);
}
